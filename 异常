异常
java使用异常处理机制为程序提供错误处理能力，通过try，catch，finally，throw，throws
1）try catch finally
//1、try{...} catch(Exception e){e.printStackTrace();} finally{}，是否异常，都会执行finally
//2、使用e.printStackTrace()打印异常的堆栈信息，从异常信息的最后一行开始追踪，寻找自己编写的代码
//3、可以使用专门的异常进行捕捉try{...} catch(ArithmeticException e){e.printStackTrace();}
//4、异常捕捉注意顺序，子类具体Exception在前。若异常类型不匹配，最后的父类Exception会捕捉所有异常。
import java.util.InputMismatchException;
import java.util.Scanner;
public class ExceptionT {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try
        {
            System.out.println("input 除数");
            int num1 = scanner.nextInt();
            System.out.println("input被除数");
            int num2 = scanner.nextInt();
            System.out.println(String.format("%d/%d=%d",num1,num2,num1/num2));
        }
//        catch(Exception e)//捕捉所有异常，输出异常的信息，不能放在最前面
//        {
//            System.out.println("出现异常");
//            e.printStackTrace();//打印异常信息
//        }
        catch (ArithmeticException e)//专门捕获ArithmeticException异常
        {
            System.out.println("除数不能为0");
            e.printStackTrace();
        }
        catch(InputMismatchException e)//专门捕获InputMismatchException异常
        {
            System.out.println("数值类型不匹配");
            e.printStackTrace();
        }
        catch(Exception e)//注意顺序，父类在最后捕获前面子类未捕获的异常
        {
            System.out.println("出现异常");
            e.printStackTrace();//打印异常信息
        }
        System.out.println("谢谢使用");
        System.exit(0);//退出程序
    }
}
