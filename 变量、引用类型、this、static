1、变量
成员变量和局部变量
区别：
声明位置不同： 类中 | 方法中
作用范围不同： 当前类的方法 | 当前方法
内存存放位置不同： 栈内存中 | 堆内存中
默认值：成员变量有默认值 | 局部变量没有默认值
在成员变量中，有static修饰的是类变量，没有static修饰的是实例变量。

1.1 测试在java中的值传递,方法的参数是基本类型，不会改变值；引用类型，地址不变，但是地址指向的值改变。

    public void ex(int a , int b)
    {
        int temp = a;
        a = b;
        b = temp;
        //在方法中ab的值交换，但是形参是局部变量，方法执行完即销毁
        System.out.println(a + " "+ b);
        
    }

    public static void main(String[] args) {
        int a1 = 1;
        int a2 = 2;
        new Value().ex(a1,a2);
        //在另一个方法a1，a2的值不变
        System.out.println(a1 + " " + a2);
    }
}

2、引用数据类型
基本数据类型储存在栈中，引用数据类型储存在堆中。
引用类型栈保存地址，指向实际堆存储的数据。在java中除了基本类型（整型、浮点型、字符型、布尔型，四类八种）
之外都是引用类型，引用类型可以是一个类，接口或者数组。

3、内存分析
栈：存放局部变量，方法执行完毕，自动释放空间
堆：成员变量放在堆中，存放new出来的对象，需要垃圾回收器回收，System.gc()
方法区：存放类的信息、static变量、字符串常量等

4、构造器和this
构造器也叫构造方法，可以在其中定义变量，执行语句。
this表示当前对象的一个引用，不能和static，super同时使用
public class Construct {
    String name;//成员变量放在堆中。
    static int age;//static修饰成员变量市，表示静态变量，为整个类所用，存储在方法的静态区。
    //在类加载时就已经显式初始化。
    public Construct(String name, int age)//构造器初始化数据
    {
        this.name = name;
        this.age = age;
    }
    public Construct()//无参构造器
    {
      this("ll",123);//使用this调用类中其他构造器，必须放在第一条
    }
    public void Construct()//普通方法
    {
        System.out.println(Construct.age)//可以
    }
    public void test(String name)
    {
        System.out.println("test2\t" + name);
        System.out.println("test2\t" + this.name);
    }
    public static void main(String[] args) {
        Construct c = new Construct("con",123);
        System.out.println(c.name);
        c.test("test");
    }
}
