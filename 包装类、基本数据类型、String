1、包装类与基本类型数值比较
包装类是将基本数据类型封装成一个类，包含属性和方法。包装类和基本类型比较时，包装类自动拆成基本类型
//装箱：将基本数据类型转换成包装类
//拆箱：将包装类转换成基本数据类型
public class DataType {
    public static void main(String[] args) {
        //当引用类型和基本，=类型比较时，会自动转换为基本类型
        //当引用类型互相比较时，不变
        Integer i1 = 100;//编译器会自动变成Integer i=Integer.valueOf(100)
        int i11 = new Integer(100);//编译器自动变成int a = new Integer(100).intValue();
        Integer i2 = 100;
        String s1 = "200";
        int i33 = 200;
        Integer i3 = 200;
        Integer i4 = 200;
        Double i5 = 1.0;
        double i51 = 1.0;
        Double i6 = 1.0;
        int i7 = i3.intValue();//拆箱成基本类型，200
        int i8 = i4.intValue();//拆箱成基本类型，200
        Integer i9 = Integer.valueOf(i7);//装箱成引用类型
        Integer i10 = Integer.valueOf(i8);
        //Integer i1 = 100会执行Integer.ValueOf，在-128-127之间的数从cache中取
        //不在这个范围的数要new Integer(i)。
        //Byte.valueOf()创建的数据只能在-128~127，都相等
        //Short.valueOf()，Long.valueOf()同Integer;
        //Double.valueOf和Float.valueOf不管数目多大都会新建
        System.out.println(i1==i2);//true
        System.out.println(i33==Integer.valueOf(s1));//true，基本类型
        System.out.println(i3==Integer.valueOf(s1));//false，小于127为true
        System.out.println(i3==i4);//false
        System.out.println(i5==i6);//flase
        System.out.println(i5==i51);//true，包装类和基本类型比较时，包装类自动拆成基本类型
        System.out.println(i7==i8);//true
        System.out.println(i9==i10);//flase

    }
}
class NumT
{
    public static void main(String[] args) {
        int a = 10;
        Integer i = new Integer(10);
        //通过方法进行类型转换，在运算时会进行自动转换。
        Integer i2 = Integer.valueOf(a);//装箱，基本类型转换成引用类型
        int i3 = i.intValue();//拆箱，将引用类型转换成基本类型
        System.out.println(a==i);
        Double d1 = 1.0;
        Float f1 = Float.valueOf(1);
//        Double.valueOf()；
//        Byte.valueOf()
        System.out.println(f1.equals(d1));
    }
}
/////////////////////////////////////////////////////////////////////
2、字符串
//1、字符串放在常量池，常量池放置在堆空间中
//2、字符串本质是一个字符数组，String类使用final修饰，不能被继承.
//3、使用equals方法比较的是字符数组每一个位置的值。
//4、默认的hashCode算法值相同的字符串哈希值相同
public class StringT {
    public static void main(String[] args) {
        String str = "abca";//字符串放在常量池
        String str2 = new String("abca");
        System.out.println(str == str2);//false，地址不一样，
        System.out.println(str.equals(str2));//true
        System.out.println(str.hashCode()==str2.hashCode());//哈希码一样
        System.out.println(str.charAt(0));//输出0位置的字符
        System.out.println(str.equalsIgnoreCase(str2));//忽略大写比较相等
        System.out.println(str.indexOf('a'));//输出第一个字符a的位置
        System.out.println(str.length());//返回字符串长度
        System.out.println(str.replace('a','x'));//将字符串中的a字符替换为x字符
        System.out.println(str.substring(0,2));//截取一段字符串
        System.out.println(str.toUpperCase());//将字符串字母全都大写
        System.out.println(str.toLowerCase());//将字符串字母全部小写
        System.out.println(str.startsWith("ab"));//字符串是否以ab开头
        System.out.println(str.endsWith("cd"));//字符串是否以cd结尾
        System.out.println(str.trim());//返回删除开头和结尾空格后的字符串
        
        char[] var = str.toCharArray();//字符串转换为字符数组
        String v = String.valueOf(var);//字符数组转换为字符串
    }
}









