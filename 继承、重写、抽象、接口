1、继承
表示父类跟子类的关系，子类是父类的一种。
如果子类构造方法不指定super(...),则子类构造方法默认super()，会默认调用父类无参构造方法。调用构造方法，不是继承构造方法。
初始化顺寻为：父类属性→父类构造方法→子类属性→子类构造方法
public class extendTest extends father//使用extends表示继承，只能继承一个父类
{
    private int weight;
    public extendTest(String name, int age, int weight)
    {
        super(name,age);//在构造方法中使用super，会调用父类构造方法，必须写在第一行
        this.weight = weight;
    }
    public extendTest(){
        //this();不能同时使用this调用此类构造器方法，使用super调用父类构造器方法。
        super("qwe",132);//在子类构造器中，如果没有super(...)，则默认调用super()
    }
    //public extendTest(){}子类构造器默认调用super()，要求父类也有对应的无参构造器。
    public void print()
    {
        System.out.println("son");
        super.print();//在普通方法中使用super调用父类中的方法，super可在任意位置，不可与static同用
    }
    public static void main(String[] args) {
        extendTest ex = new extendTest();
        ex.print();
    }
}
class father
{
    private String name;
    private int age;

    public father(){}
    public father(String name, int age)
    {
        this.name = name;
        this.age = age;
    }
    public void prin()
    {
        System.out.println("father");
    }
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }
    public int getAge() {
        return age;
    }
}
2、重写
子类重写父类方法，会优先调用子类方法。
重写的方法名称一样，形参列表一样，返回值一样或是子类。
重写方法不能缩小访问权限。
3、抽象
//1、有些类没有创建实例的意义，因此有了抽象类，抽象类可以有构造方法，但是抽象类不能实例化
//2、创建抽象类需要abstract关键字。
//3、抽象类中可以有抽象方法和具体方法。子类必须实现父类的抽象方法。
abstract class AbstractT extends abs{
    final int i = 1;//final修饰的变量为常量，i的值无法更改就为1
    @Override
    public final void test1(){}//重写父类的实例方法，添加final修饰符，此方法无法被再次重写。
    
    public static void main(String[] args) {
        AbstractT a = new AbstractT() {//匿名内部类实现抽象类的方法，看似new了一个抽象类，实际上new了一个抽象类的实现类
            @Override
            void test() {
                System.out.println("123");
            }
        };
        a.test();
    }
}
abstract class abs
{
    abstract void test();//定义抽象方法，没有方法体
    public  void test1(){}
}

4、接口
1）接口使用implement实现，接口中所有方法都是抽象方法。接口中不能有构造方法
2）接口可由具体类和抽象类实现，不能由接口实现。一个类可以实现多个接口。
3）接口中方法默认是abstract修饰符，访问控制权限只能是public。不写就是public abstract 
4）接口中变量默认public static final修饰。接口不能被实例化。
5）实现类必须实现接口中所有的方法（包括抽象父类中未实现的方法）。抽象类可以实现接口，不用实现接口中的方法。
abstract  class A
{
    public abstract void m1();
    public abstract void m2();
}
interface In
{
    static final int i=1;//接口中的变量默认是静态常量，即static final修饰，必须赋值。
    void in1();
    void in2();
}
abstract class B extends A implements In{//使用抽象类继承抽象类，实现接口
    @Override
    public void m1(){}//抽象类中可以有具体方法

    @Override
    public void in1(){}
}
class D extends B{//使用具体类继承抽象类，具体类必须实现父类中未实现的抽象方法
    @Override
    public void m2(){//实现抽象父类中未实现的方法
        //In n = new In();接口不能实例化。
        //A a = new A();抽象类不能实例化。

    }
    public void in2(){}//由于接口中的方法修饰符默认为public abstract，因此接口实现方法修饰符必须显式public
}
5、接口与抽象类异同
不同：
1）继承和实现
接口不能implements其他接口或者类，但是接口可以extends其他接口 📕 抽象类可以实现接口，可以继承类。抽象类可以不实现抽象方法，而是使用abstract传给子类
子类实现方法控制符权限不能变小，因此实现接口方法控制符必须显式public 📕 实现抽象类中abstract方法控制符权限不比原权限小即可。
2）变量和方法
接口中的变量都是public tatic final修饰的，在定义时就应当被赋值 📕 抽象类中的属性修饰符任意。
接口中的方法都是public修饰的抽象方法 📕 抽象类中的抽象方法不能用private修饰，抽象类中的实例方法修饰符随意。
接口中不能有构造方法 📕 抽象类中可以有构造方法
3）被继承 
一个类可以实现多个接口 📕 一个类只能继承一个类

相同：
接口和类都不能实例化
实现类必须实现接口或者抽象类中所有的方法，不能用abstract传递给子类，因为有abstract方法的必须是接口或者抽象类。

6、内部类
//1、一个类内部定义类，称为内部类，可以当作一个成员属性
//2、内部类可以访问外部类的私有属性，但是其他类创建的内部类实例不可以直接访问。外部类不能直接访问内部类的属性，外部类通过新建内部类实例访问
//3、创建内部类的方法；outter.InnerClass in1 = new outter().new InnerClass();//直接创建内部类实例
//4、内部类中的方法不能用static修饰
//5、匿名内部类，new interface(){重写方法};
public class InnerClass {
    public static void main(String[] args) {
        outter o = new outter();//创建外部类实例

        outter.InnerClass in1 = new outter().new InnerClass();//直接创建内部类实例
        in1.print();

       //匿名内部类开始
        new Thread(new Runnable() { //Thread()中需要Runnable接口类型对象
            //new Thread(new aaa implements Runnable())，省略aaa implements
            // 看着像new了一个接口，实际上是new了一个接口的实现类
            @Override
            public void run() {
            }
        });
        new Runnable()//
        {
            @Override
            public void run() {
            }
        };
        //非匿名内部类
        new Thread(new runner());//可以新建一个runner类实现Runnable接口
    }
}
class runner implements Runnable
{
    @Override
    public void run() {
    }
}
//匿名内部类结束
//内部类开始
class outter
{
    private int age;
    private String name = "outter";

    public void show()
    {
        //print();外部类不能直接访问内部类的属性
        new InnerClass().print();//新建内部类实例调用内部类方法
        System.out.println(new InnerClass().id);//通过新建实例可以访问内部类的私有属性
    }
    class InnerClass
    {
        private int id = 1;
        private String name = "inner";

        public void print() {
            age=2;//内部类可以直接访问外部类的私有属性
            System.out.println(name);//内部类中默认访问内部类重名属性
            System.out.println(this.name);
            System.out.println(outter.this.name);//可以使用outter.this访问外部重名属性
        }
//        public static void fail(){}内部类不能定义static方法
    }
}
class test
{
    outter.InnerClass in = new outter().new InnerClass();//创建内部类实例
    //int k = in.age;不管外部类中age修饰符是private还是public，在其他类的内部类实例都不能直接访问
}
//内部类结束





