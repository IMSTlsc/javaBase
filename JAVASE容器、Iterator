1、接口包括Collection接口，Iterator接口，Iterable接口，Set接口，Comparable接口，List接口，Map接口
2、具体类为Collections，提供了对集合的排序，遍历等操作
//1、Collection存储不唯一，无序对象，List，Set是Collection的子接口，
//2、List存储不唯一，有序对象。操作索引(index)的方法是List独有的
//3、Set存储唯一，无序对象
//4、Map使用k-v存储
/////////////////////////////////////////////////////////////////////////////
////////////List测试
//1、ArrayList查找元素快，LinkedList插入删除快
//1、ArrayList和LinkedList，Vector是List的实现类，
// Vector线程安全,ArrayList不安全。Vector扩容2倍，Arraylist扩容1.5倍
public class CollectionsT {
    public static void main(String[] args) {
//        new CollectionsT().CollectionTest();
        new CollectionsT().LinkedTest();
        Vector vector = new Vector();
    }
    //LinkedList测试
    public void LinkedTest(){
        LinkedList linkedList = new LinkedList();
        linkedList.add(123);
        linkedList.add(true);//在尾部添加元素
//        linkedList.add(1,"qwe");
//        linkedList.remove(1);
//        linkedList.peek();//返回顶部元素
//        linkedList.poll();//返回顶部元素并删除
        linkedList.push("asd");//在头部压入元素
        linkedList.pop();//从头部删除元素
        linkedList.pop();//从头部删除元素
        System.out.println(linkedList);
    }
    //Collection测试
    public void CollectionTest(){
        Collection collection = new ArrayList();

        collection.add(1);//自动装箱成new Integer(1)
        collection.add(true);//可以存放所有Object类型
        collection.add(true);//可以重复存放
        if (collection.contains(1))//判断是否包含某个元素
            ((List)((ArrayList)collection)).remove(true);//先强转为ArrayList，再转成List。
        ((List) collection).add(1, "qwe");//Collection是无序的，强转成List型。
        // 不能强转为Set，因为创建的是ArrayList实例。Collection-List-ArraList
        System.out.println(((ArrayList) collection).get(1));

        Collection collection1 = new ArrayList();
        collection1.add(2);
        collection1.add(3);
        ((ArrayList) collection).addAll(collection1);//父类强转成子类。
        System.out.println(collection);

        System.out.println(collection.contains(2));//判断集合中是否包含某个元素。
        System.out.println(collection.containsAll(collection1));//判断一个集合是否包含另一个集合，元素顺序一样
        System.out.println(collection.isEmpty());//判断是否为空
        System.out.println(collection.retainAll(collection1));//判断一个集合是否拥有另一个集合的所有元素，元素顺序不必一样

        Object[] objects = collection.toArray();
        for (Object o : objects)
            System.out.println(o);

        collection.clear();//清空元素
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////
Set：Set存放无序，不重复的数据，重复的数据自动合并。常用TreeSet和HashSet
public class SetT {
    public static void main(String[] args) {
        new SetT().TreeSetTest();

    }
    public void TreeSetTest()//Tree当中存储的数据类型一致，因为在存储时会排序
    {
        TreeSet treeSet = new TreeSet();//本质是TreeMap
        treeSet.add("312");
        treeSet.add("qwe");
        System.out.println(treeSet);
    }
    public void HashSetTest()
    {
        Set set = new HashSet();//HashSet本质上是HashMap
        set.add(1);
        set.add(1);
        set.add(2);
        System.out.println(set);
        //使用for的迭代器
        for(Iterator iter = set.iterator();iter.hasNext();)
        {
            System.out.println(iter.next());
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
迭代器
        //迭代器
        //Iterator iterator = linkedList.iterator();//将集合变成迭代器对象
        ListIterator iterator = linkedList.listIterator();//Iterator的子接口
        while(iterator.hasNext())//当集合还有元素
        {
            Object o = iterator.next();
            if(o.equals(1))
                iterator.remove();//删除1这个元素，当使用Iterator时，删除报错
            System.out.println(iterator.next());
        }

        //增强for循环实际上也是迭代器
        for(Object i : linkedList)//linkedList中1元素已删除
        {
            System.out.println(i);
        }

