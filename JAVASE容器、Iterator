1、接口包括Collection接口，Iterator接口，Iterable接口，Set接口，Comparable接口，List接口，Map接口
2、具体类为Collections，提供了对集合的排序，遍历等操作
//1、Collection存储不唯一，无序对象，List，Set是Collection的子接口，
//2、List存储不唯一，有序对象。操作索引(index)的方法是List独有的
//3、Set存储唯一，无序对象
//4、Map使用k-v存储
/////////////////////////////////////////////////////////////////////////////
////////////一 、 List测试
//1、ArrayList查找元素快，LinkedList插入删除快
//1、ArrayList和LinkedList，Vector是List的实现类，
// Vector线程安全,ArrayList不安全。Vector扩容2倍，Arraylist扩容1.5倍
public class CollectionsT {
    public static void main(String[] args) {
//        new CollectionsT().CollectionTest();
        new CollectionsT().LinkedTest();
        Vector vector = new Vector();
    }
    //LinkedList测试
    public void LinkedTest(){
        LinkedList linkedList = new LinkedList();
        linkedList.add(123);
        linkedList.add(true);//在尾部添加元素
//        linkedList.add(1,"qwe");
//        linkedList.remove(1);
//        linkedList.peek();//返回顶部元素
//        linkedList.poll();//返回顶部元素并删除
        linkedList.push("asd");//在头部压入元素
        linkedList.pop();//从头部删除元素
        linkedList.pop();//从头部删除元素
        System.out.println(linkedList);
    }
    //Collection测试
    public void CollectionTest(){
        Collection collection = new ArrayList();

        collection.add(1);//自动装箱成new Integer(1)
        collection.add(true);//可以存放所有Object类型
        collection.add(true);//可以重复存放
        if (collection.contains(1))//判断是否包含某个元素
            ((List)((ArrayList)collection)).remove(true);//先强转为ArrayList，再转成List。
        ((List) collection).add(1, "qwe");//Collection是无序的，强转成List型。
        // 不能强转为Set，因为创建的是ArrayList实例。Collection-List-ArraList
        System.out.println(((ArrayList) collection).get(1));

        Collection collection1 = new ArrayList();
        collection1.add(2);
        collection1.add(3);
        ((ArrayList) collection).addAll(collection1);//父类强转成子类。
        System.out.println(collection);

        System.out.println(collection.contains(2));//判断集合中是否包含某个元素。
        System.out.println(collection.containsAll(collection1));//判断一个集合是否包含另一个集合，元素顺序一样
        System.out.println(collection.isEmpty());//判断是否为空
        System.out.println(collection.retainAll(collection1));//判断一个集合是否拥有另一个集合的所有元素，元素顺序不必一样

        Object[] objects = collection.toArray();
        for (Object o : objects)
            System.out.println(o);

        collection.clear();//清空元素
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////
二、Set：Set存放无序，不重复的数据，重复的数据自动合并。常用TreeSet和HashSet

//1、Set中存放唯一无序数据
//2、往Set中放置自定义元素时，会查找对象中的equals方法和hashCode方法，如果没有，则比较地址
//先判断hashCode值是否相等，若相等再判断equals
//3、Tree在存储数据时会将数据排序，存储自定义数据时需要实现Comparable接口中的comparaTo（）方法。
//比较器分为内部比较器和外部比较器
//内部比较器：定义在元素的类中，改写Comparable接口中的compareTo方法。
//外部比较器：定义在当前类中，改写Comparator接口中compare方法,并将比较器传递到集合中

import java.util.*;

public class SetT implements Comparator{
    public static void main(String[] args) {
        new SetT().TreeSetTest();
    }
    public void TreeSetTest()//Tree在存储时会排序，TerrSet本质是TreeMap
    {
        TreeSet treeSet = new TreeSet(new SetT());//传入比较器
        treeSet.add(new Per("张三",12));
        treeSet.add(new Per("李四",18));
        treeSet.add(new Per("李四",13));
        treeSet.add(new Per("qwe",12));//根据比较器中age相等的数据不会重复
        
        System.out.println(treeSet);//修改Per类中的toString方法后输出
        /*
        //使用匿名内部类重写比较器
        TreeSet treeSet2 = new TreeSet(new Comparator(){
            @Override
            public int compare(Object o1, Object o2)
            {
                Per p1 = (Per)o1;
                Per p2 = (Per)o2;
                if(p1.getAge()>p2.getAge())
                    return 1;
                else if(p2.getAge()<p2.getAge())
                    return -1;
                return 0;
            }
        });*/
    }
    public void HashSetTest()
    {
        //若不重写equals方法和hashCode，输出三组数据
        // 重写HashCode后输出两组数据
        Set set = new HashSet();//HashSet本质上是HashMap
        set.add(new Per("张三",12));
        set.add(new Per("李四",13));
        set.add(new Per("李四",13));
        System.out.println(set);
    }

    @Override
    public int compare(Object o1, Object o2) {
        Per p1 = (Per)o1;
        Per p2 = (Per)o2;

        if(p1.getAge()>p2.getAge())
            return 1;
        else if(p1.getAge()<p2.getAge())//按照return-1的排
            return -1;
        return 0;//return0的数据不会添加到Tree中
    }
}
class Per //implements Comparable
{
    private String name;
    private int age;
    public Per(String name, int age)
    {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }
    //重写比较器
//    @Override
//    public int compareTo(Object o)
//    {
//        Per p = (Per)o;
//        if(p.name.length()>this.name.length())
//            return 1;
//        else if(p.name.length()<this.name.length())
//            return -1;
//        else
//            return 0;
//    }

    @Override
    public String toString() {
        return "Per{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Per per = (Per) o;
        return age == per.age &&
                Objects.equals(name, per.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, age);
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
迭代器
        //迭代器
        //Iterator iterator = linkedList.iterator();//将集合变成迭代器对象
        ListIterator iterator = linkedList.listIterator();//Iterator的子接口
        while(iterator.hasNext())//当集合还有元素
        {
            Object o = iterator.next();
            if(o.equals(1))
                iterator.remove();//删除1这个元素，当使用Iterator时，删除报错
            System.out.println(iterator.next());
        }

        //增强for循环实际上也是迭代器
        for(Object i : linkedList)//linkedList中1元素已删除
        {
            System.out.println(i);
        }

