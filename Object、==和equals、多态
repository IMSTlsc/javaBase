1、Object
一个类如果没有extends继承其他类，那么这个类就继承Object类。
2、==和equals
import java.util.Objects;

public class ObjectT {
    private String name;
    private  int age;

    public ObjectT(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override//自定义类需要重写equals，否则调用Object中的equals，return(this==obj)。
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ObjectT objectT = (ObjectT) o;
        return age == objectT.age &&
                Objects.equals(name, objectT.name);
    }

    @Override//哈希码可以理解为对象的地址值
    public int hashCode() {
        return Objects.hash(name, age);
    }

    public static void main(String[] args) {
        ObjectT s1 = new ObjectT("zhangsan",12);
        ObjectT s2 = s1;//s2和s1指向同一存储地址
        s2.setName("lisi");//修改s2所指的name为lisi，同时s1所指name值也为lisi
        System.out.println(s1==s2);//T，两个对象指向同一地址。
        System.out.println(s1.equals(s2));//T，两个对象的值相等。
        System.out.println(s1.getName());//s1name值为lisi。

        ObjectT s3 = new ObjectT("lisi",12);//新建一个实例，其值与s1相同
        System.out.println(s1==s3);//F，==比较两个引用类型是否指向同一对象
        System.out.println(s1.equals(s3));//T，equals比较两个对象内容是否一致，自定义类必须重写equals，否则总是返回false

    }
    
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

}
3、多态
提高代码的扩展性和可维护性。
多态必须有继承关系，子类必须重写父类方法，父类引用指向子类对象。
同一个引用类型指向不同的实例而进行不同的操作，例如
        pet c = new cat();//父类引用指向子类对象，c为pet型，只能引用pet中的方法。若pet中的方法
        //被cat重写，则使用cat中的方法。
        dog d = new dog();//d可以执行pet和dog中所有的方法。
强制类型准换需要保证父类引用指向子类对象。
        pet p2 = new cat();//p2为pet型，指向子类cat。
        cat c =(cat)p2;//强制转转为cat型。
        
public class poly {
//    public void feed(cat cat)
//    {
//        cat.feed();
//    }
//    public void feed(dog d)
//    {
//        d.feed();
//    }
    public void feed(pet p)//定义喂宠物，当调用时根据参数决定调用猫或狗。
    //定义方法时使用父类，调用时使用子类
    {
        p.feed();
    }
    public static void main(String[] args) {
        poly p = new poly();
        pet c = new cat();//父类引用指向子类对象，自动转型。
        pet d = new dog();//父类引用指向子类对象
        p.feed(c);
        p.feed(d);
    }
}
abstract class pet
{
    public abstract void feed();
}
class dog extends pet
{
    @Override
    public void feed()
    {
        System.out.println("feed dog");
    }
}
class cat extends pet
{
    @Override
    public void feed()
    {
        System.out.println("feed cat");
    }
}

