package IO;
//流按照传输数据类型，可分为字节流和字符流；按照功能可分为节点流和包装流（处理流）。
一、按功能
//1、节点流（FileOutputStream，FileInputStream，FileReader，FileWriter）可以直接从数据源读写数据；
//2、包装流（OutputStreamWriter，InputStreamReader）不能直接连接到数据源，主要对其他流进行包装以简化操作提高性能。例如让字节流读取字符，
//可以使用InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream,utf-8);其中utf-8设置编码格式，可省略
二、按数据类型
//1、字节流 InputStream，OutStream（8位字节），传输音乐，文本等。中文会乱码
//2、字符流 Reader，Writer（16位unicode码），传输中文（一般两个字节）不会乱码
//3、对于输出流，带缓冲区必须flush；不带缓冲区close可以充当flush
//4、字符流的缓冲区为byte[],字符流的缓冲区为char[]

import java.io.*;

public class IOTest {
    public static void main(String[] args) throws Exception{
        new IOTest().Copybyte();
//        new IOTest().Copychar();
//        new IOTest().ReaderTest();
//        new IOTest().WriterTest();


    }
    //使用byte，复制pdf
    public void Copybyte() {
        InputStream inputStream = null;
        OutputStream outputStream = null;
        try{
            //创建流
            inputStream = new FileInputStream("F://1.pdf");
            outputStream = new FileOutputStream("F://2.pdf");
            //创建缓存区
            byte[] buffer = new byte[1024];//每1024个字节为一组传输，一个字母一个字节
            int length = 0;
            //文件传输完成 =-1
            while((length = inputStream.read(buffer)) != -1){
                outputStream.write(buffer);
            }
           // 输出流flush
            outputStream.flush();
        } catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException e) {//IOException要在FileException后边
            e.printStackTrace();
        } finally{
            try{
                //关闭流
                inputStream.close();
                outputStream.close();
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
    //使用char复制文本文档
    public void Copychar()
    {
        Reader reader = null;
        Writer writer = null;
        try{
            reader = new FileReader("F://1.txt");
            writer = new FileWriter("F://2.txt");

            char[] buf = new char[1024];
            int length = 0;
            while((length = reader.read(buf)) != -1){
                writer.write(buf);
            }
            writer.flush();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }finally{
        }
    }
    //使用Writer将内容写到文件中
    public void WriterTest() {
        //建立文件地址
        File file = new File("D://java/dest.txt");
        //创建流
        Writer writer = null;
        try {
            writer = new FileWriter(file);
            writer.write("123");
            writer.write("哈哈哈");

            //在输出流关闭前，先flush，将数据写入。
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    //使用Reader将文件中内容读取
    public void ReaderTest() {
        Reader reader = null;
        try {
            //新建流
            reader = new FileReader("D://java/src.txt");
            //设置缓冲区
            char[] buffer = new char[1024];
            //完成数据传输，流读取完成后会返回-1
            int length = 0;
            while ((length = reader.read(buffer)) != -1) {
                System.out.println(new String(buffer, 0, length));
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    //包装流测试,inputStreamReader
    public void InputStreamReaderDemo(){

        FileInputStream fileInputStream = null;
        InputStreamReader inputStreamReader = null;
        try{
            fileInputStream = new FileInputStream("F://1.txt");
            inputStreamReader = new InputStreamReader(fileInputStream);//将字节流包装成字符流
            char[] chars = new char[1024];
            int length = 0;
            while((length = inputStreamReader.read(chars)) != -1){
                System.out.println(new String(chars,0,length));
            }
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }finally{
            try {
                inputStreamReader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                fileInputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }
}
